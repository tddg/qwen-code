#!/usr/bin/env node

/**
 * Demo showing the duplicate logging fix
 */

import fs from 'fs';
import path from 'path';

// Create demo logs showing the fix
const beforeLogs = [
  {
    eventType: 'api_request',
    timestamp: new Date().toISOString(),
    sessionId: 'duplicate-fix-session',
    promptId: 'prompt-duplicate-001',
    model: 'qwen-2.5-coder',
    operationType: 'tool_call',
    requestContext: 'new',
    toolsCalled: ['read_file'], // ‚úÖ FIXED: Now shows specific tools
    estimatedTokens: 1500,
    conversationTurn: 1,
    hasFileContext: true,
    systemPromptLength: 2847, // ‚úÖ FIXED: Now shows actual length
    studentIdHash: 'test123456789abc',
    machineIdHash: 'machine987654321',
  },
  // ‚ùå BEFORE: Two api_response entries for same request
  {
    eventType: 'api_response',
    timestamp: new Date(Date.now() + 1000).toISOString(),
    sessionId: 'duplicate-fix-session',
    promptId: 'prompt-duplicate-001',
    model: 'qwen-2.5-coder',
    inputTokenCount: 1250,
    outputTokenCount: 380,
    durationMs: 2400,
    // No responseType (successful response)
    studentIdHash: 'test123456789abc',
    machineIdHash: 'machine987654321',
  },
  {
    eventType: 'api_response',
    timestamp: new Date(Date.now() + 1100).toISOString(),
    sessionId: 'duplicate-fix-session', 
    promptId: 'prompt-duplicate-001', // ‚ùå SAME PROMPT ID!
    model: 'qwen-2.5-coder',
    inputTokenCount: 0, // ‚ùå WRONG: 0 tokens
    outputTokenCount: 0, // ‚ùå WRONG: 0 tokens
    durationMs: 2450,
    responseType: 'error', // ‚ùå WRONG: False error
    studentIdHash: 'test123456789abc',
    machineIdHash: 'machine987654321',
  }
];

const afterLogs = [
  {
    eventType: 'api_request',
    timestamp: new Date(Date.now() + 5000).toISOString(),
    sessionId: 'duplicate-fix-session',
    promptId: 'prompt-fixed-002',
    model: 'qwen-2.5-coder',
    operationType: 'tool_call',
    requestContext: 'new',
    toolsCalled: ['read_file'], // ‚úÖ Shows specific tool
    estimatedTokens: 1500,
    conversationTurn: 2,
    hasFileContext: true,
    systemPromptLength: 2847, // ‚úÖ Shows actual length
    studentIdHash: 'test123456789abc',
    machineIdHash: 'machine987654321',
  },
  // ‚úÖ AFTER: Only ONE api_response entry
  {
    eventType: 'api_response',
    timestamp: new Date(Date.now() + 6000).toISOString(),
    sessionId: 'duplicate-fix-session',
    promptId: 'prompt-fixed-002',
    model: 'qwen-2.5-coder',
    inputTokenCount: 1250, // ‚úÖ CORRECT: Real tokens
    outputTokenCount: 380,  // ‚úÖ CORRECT: Real tokens
    durationMs: 2400,
    responseType: 'tool_call', // ‚úÖ CORRECT: Proper response type
    studentIdHash: 'test123456789abc',
    machineIdHash: 'machine987654321',
  }
];

// Write to demo log file
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

const demoLogPath = path.join(logsDir, 'duplicate-logging-fix-demo.jsonl');
const allLogs = [...beforeLogs, ...afterLogs];
const logContent = allLogs.map(log => JSON.stringify(log)).join('\n') + '\n';
fs.writeFileSync(demoLogPath, logContent);

console.log('üîÑ Duplicate Logging Fix Demo');
console.log('=' .repeat(50));
console.log(`üìÅ Demo log: ${demoLogPath}`);

console.log('\n‚ùå BEFORE (Problem):');
console.log('   ‚Ä¢ 1 api_request ‚Üí 2 api_response entries');
console.log('   ‚Ä¢ First api_response: Real tokens, no responseType');
console.log('   ‚Ä¢ Second api_response: 0 tokens, responseType="error"');
console.log('   ‚Ä¢ toolsCalled: All available tools (not useful)');
console.log('   ‚Ä¢ systemPromptLength: Always 0 (not useful)');

console.log('\n‚úÖ AFTER (Fixed):');
console.log('   ‚Ä¢ 1 api_request ‚Üí 1 api_response entry');
console.log('   ‚Ä¢ Single api_response: Real tokens, proper responseType');
console.log('   ‚Ä¢ No duplicate/false error logging');
console.log('   ‚Ä¢ toolsCalled: Specific tools predicted from request');
console.log('   ‚Ä¢ systemPromptLength: Actual prompt length');

console.log('\nüîß Technical Fix:');
console.log('   ‚Ä¢ Added loggedResponses Set to track processed prompt IDs');
console.log('   ‚Ä¢ _logApiResponse checks for duplicates before logging');
console.log('   ‚Ä¢ Memory leak prevention: cleanup after 100 entries');
console.log('   ‚Ä¢ Improved responseType detection for streaming responses');

console.log('\nüéì Benefits for CS 6501:');
console.log('   ‚Ä¢ Clean, accurate logs for analysis');
console.log('   ‚Ä¢ No false error signals to confuse students');
console.log('   ‚Ä¢ Proper tool usage tracking');
console.log('   ‚Ä¢ Reliable system prompt length metrics');

console.log('\nüìä Log Statistics:');
console.log(`   Total events: ${allLogs.length}`);
console.log(`   BEFORE: 1 request + 2 responses = 3 events (33% redundant)`);
console.log(`   AFTER:  1 request + 1 response  = 2 events (0% redundant)`);
console.log('   üéØ 50% reduction in log noise!');